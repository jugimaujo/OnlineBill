@model OnlineBill.Domain.Models.BillGraphViewModel
@using Newtonsoft.Json

@{
	ViewData["Title"] = "Relatórios";

	List<string> months = ViewBag.Months;

	List<decimal> dueEarnPerMonth = ViewBag.DueEarns;
	List<decimal> dueLostPerMonth = ViewBag.DueLosts;
	List<decimal> dueTotalPerMonth = ViewBag.DueTotals;

	List<decimal?> paidEarnPerMonth = ViewBag.PaidEarns;
	List<decimal?> paidLostPerMonth = ViewBag.PaidLosts;
	List<decimal?> paidTotalPerMonth = ViewBag.PaidTotals;

	var monthSerialize = Html.Raw(JsonConvert.SerializeObject(months));

	var dueEarnPerMonthSerialize = Html.Raw(JsonConvert.SerializeObject(dueEarnPerMonth));
	var dueLostPerMonthSerialize = Html.Raw(JsonConvert.SerializeObject(dueLostPerMonth));
	var dueTotalPerMonthSerialize = Html.Raw(JsonConvert.SerializeObject(dueTotalPerMonth));

	var paidEarnPerMonthSerialize = Html.Raw(JsonConvert.SerializeObject(paidEarnPerMonth));
	var paidLostPerMonthSerialize = Html.Raw(JsonConvert.SerializeObject(paidLostPerMonth));
	var paidTotalPerMonthSerialize = Html.Raw(JsonConvert.SerializeObject(paidTotalPerMonth));
}

<h2>Relatórios de contas</h2>

<hr />

<div id="filter">
	<form method="post" class="row g-3">
		<div class="col-auto" style="display: flex; align-items: flex-end">
			<label for="category" class="form-label">Categoria:</label>
		</div>
		<div class="col-auto">
			<select asp-for="@Model.Filter.CategoryId" id="category" class="form-control">
				<option value="@null">Todas</option>
				@foreach (var item in Model.CategoryList)
				{
					<option value="@item.Id">@item.Name</option>
				}
			</select>
		</div>
		<div class="col-auto">
			<button class="btn btn-outline-light"><i class="bi bi-funnel"></i> Filtrar</button>
		</div>
	</form>
</div>

<br />

<div id="actionButtons" style="text-align: center;">
	<button id="dueDateButton" class="btn btn-outline-primary btn-sm">Ganho e Perda a vencer</button>
	<button id="totalDueDateButton" class="btn btn-outline-primary btn-sm">Valores Totais a vencer</button> |
	<button id="payDateButton" class="btn btn-outline-primary btn-sm">Ganho e Perda pagos</button>
	<button id="totalPayDateButton" class="btn btn-outline-primary btn-sm">Valores Totais pagos</button>
</div>

<canvas id="graph" width="400" height="150">
</canvas>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

	<script>
		$(document).ready(function() {
		//datas
		const dataDueDateValues = {
			labels: @monthSerialize,
			datasets: [
					{
						label: 'Ganho',
						data: @dueEarnPerMonthSerialize,
						backgroundColor: 'rgba(65, 255, 65, 0.5)',
					},
					{
						label: 'Perda',
						data: @dueLostPerMonthSerialize,
						backgroundColor: 'rgba(255, 99, 195, 0.5)'
					}
			]
		};

		const dataTotalDueDateValues = {
			labels: @monthSerialize,
			datasets: [
					{
						label: 'Total',
						data: @dueTotalPerMonthSerialize,
						backgroundColor: 'rgba(65, 98, 255, 0.5)',
					}
			]
		};

		const dataPaidDateValues = {
			labels: @monthSerialize,
			datasets: [
					{
						label: 'Ganho',
						data: @paidEarnPerMonthSerialize,
						backgroundColor: 'rgba(65, 255, 65, 0.5)',
					},
					{
						label: 'Perda',
						data: @paidLostPerMonthSerialize,
						backgroundColor: 'rgba(255, 99, 195, 0.5)'
					}
			]
		};

		const dataTotalPayDateValues = {
			labels: @monthSerialize,
			datasets: [
					{
						label: 'Total',
						data: @paidTotalPerMonthSerialize,
						backgroundColor: 'rgba(65, 98, 255, 0.5)',
					}
			]
		};

		//config
		const config = {
			type: 'bar',
			data: dataDueDateValues,
			options: {
				legends: {
					display: false,
				},
				responsive: true,
				plugins: {
					legend: {
						position: 'top',
					},
					title: {
						display: true,
						text: 'Ganho e Perda (de vencimento) X Mês'
					}
				}
			},
		};

		const ctx = $('#graph')
		const graph = new Chart(ctx, config);
		

		//actions
		function showDueDateValues(clickedButton) {
			colorButton(clickedButton)
			graph.data = dataDueDateValues;
			graph.options.plugins.title.text = 'Ganho e Perda (de vencimento) X Mês'
			graph.update();
		}

		function showTotalDueDateValues(clickedButton) {
			colorButton(clickedButton);
			graph.data = dataTotalDueDateValues;
			graph.options.plugins.title.text = 'Total (de vencimento) X Mês'
			graph.update();
		}

		function showPayDateValues(clickedButton) {
			colorButton(clickedButton);
			graph.data = dataPaidDateValues;
			graph.options.plugins.title.text = 'Ganho e Perda (pagos) X Mês'
			graph.update();
		}

		function showTotalPayDateValues(clickedButton) {
			colorButton(clickedButton);
			graph.data = dataTotalPayDateValues;
			graph.options.plugins.title.text = 'Total (pago) X Mês'
			graph.update();
		}

		document.querySelector('#dueDateButton').addEventListener('click', function() {showDueDateValues('dueDateButton')} );
		document.querySelector('#totalDueDateButton').addEventListener('click', function() {showTotalDueDateValues('totalDueDateButton')} );
		document.querySelector('#payDateButton').addEventListener('click', function() {showPayDateValues('payDateButton')} );
		document.querySelector('#totalPayDateButton').addEventListener('click', function() {showTotalPayDateValues('totalPayDateButton')} );

		function colorButton(clickedButton)
		{
			buttons = ['dueDateButton', 'totalDueDateButton', 'payDateButton', 'totalPayDateButton']

			buttons = buttons.filter(button => button != clickedButton)

			document.getElementById(clickedButton).className = 'btn btn-primary btn-sm';

			buttons.forEach((button) =>
				document.getElementById(button).className = 'btn btn-outline-primary btn-sm'
			);
		}

		colorButton('dueDateButton');

		});

	</script>
}